---
- name: Restart chrony
  become: true
  ansible.builtin.service:
    name: "{{ (ansible_os_family in ['Debian','Ubuntu']) | ternary('chrony', 'chronyd') }}"
    state: restarted
  listen: 
    - restart-chrony
    - restart-chronyd

- name: Restart ssh
  become: true
  ansible.builtin.service:
    name: "{{ ansible_os_family in ['Debian', 'Ubuntu'] | ternary('ssh', 'sshd') }}"
    state: restarted
  listen:
    - restart-ssh
    - restart-sshd

- name: Reload systemd configuration
  become: true
  ansible.builtin.command: systemctl daemon-reload
  listen: reload-systemd

- name: Restart firewalld
  become: true
  ansible.builtin.systemd_service:
    name: firewalld.service
    state: restarted
  listen: restart-firewalld
  when:
    - ansible_facts.services["firewalld"] is defined
    - ansible_facts.services["firewalld"].state == "running"

- name: Reload firewalld
  become: true
  ansible.builtin.systemd_service:
    name: firewalld.service
    state: reloaded
  listen: reload-firewalld
  when:
    - ansible_facts.services["firewalld"] is defined
    - ansible_facts.services["firewalld"].state == "running"

- name: Restart auditd
  become: true
  ansible.builtin.systemd:
    name: auditd
    state: restarted # Безопасен и работает как try-restart в systemd
  when: ansible_facts.services['auditd.service'].state == 'running' # Безопасная беопасность
  listen: systemd-restart-auditd

- name: Restart rsyslog
  become: true
  ansible.builtin.service:
    name: rsyslog
    state: restarted
    enabled: true
  listen: restart-rsyslog

- name: Restart journald
  become: true
  ansible.builtin.service:
    name: systemd-journald
    state: restarted
  listen: restart-journald

- name: Reboot if needed
  become: true
  ansible.builtin.reboot:
    reboot_timeout: 300
  listen: reboot-needed
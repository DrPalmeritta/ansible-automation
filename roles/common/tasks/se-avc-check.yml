---
- name: Check critical SELinux denials
  block:
    - name: Gather recent AVC events
      become: true
      ansible.builtin.command:
        cmd: "ausearch -m avc -ts recent --raw"
      register: avc_raw_output
      changed_when: false
      ignore_errors: true

    - name: Convert raw audit data to human-readable format
      become: true
      ansible.builtin.command:
        cmd: "echo \"{{ avc_raw_output.stdout }}\" | audit2why"
      register: avc_human_readable
      changed_when: false
      when: avc_raw_output.stdout != ""

    - name: Detect critical denial patterns
      ansible.builtin.set_fact:
        critical_denials: "{{ avc_human_readable.stdout | regex_findall('denied.*(execmem|execstack|write|unlink)') }}"
      when: avc_human_readable.stdout != ""

    - name: Trigger failure if critical issues found
      become: true
      ansible.builtin.fail:
        msg: |
          CRITICAL SELinux ISSUES DETECTED!
          Affected operations: {{ critical_denials | unique | join(', ') }}
          
          Full report:
          {{ avc_human_readable.stdout | trim }}
          
          Immediate actions required:
          1. Check system integrity
          2. Analyze SELinux policies
          3. Consult security team
      when:
        - critical_denials | default([]) | length > 0
        - not force_ignore_selinux | default(false)
  rescue:
    - name: Handle SELinux check failure
      ansible.builtin.debug:
        msg: "SELinux check bypassed (force_ignore_selinux=true)"
      when: force_ignore_selinux | default(false)

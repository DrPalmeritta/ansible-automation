---
- name: YUM Repository Management
  when:
    - ansible_pkg_mgr == "yum"
  block:
    - name: Display the content of current yum.repos.d
      ansible.builtin.debug:
        msg: "{{ lookup('ansible.builtin.fileglob', '/etc/yum.repos.d/*.repo') }}"

    - name: Backup existing repos
      become: true
      ansible.builtin.copy:
        src: "/etc/yum.repos.d/"
        dest: "/tmp/yum.repos.d.backup-{{ ansible_date_time.epoch }}/"
        remote_src: true
        directory_mode: true
      when: true

    - name: Purge existing repos
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ lookup('ansible.builtin.fileglob', '/etc/yum.repos.d/*.repo') }}"

    - name: Configure YUM repos
      become: true
      ansible.builtin.yum_repository:
        name: "{{ item.name }}"
        description: "{{ item.description }}"
        baseurl: "{{ private_repository_base_url }}/repository/{{ item.name }}"
        enabled: "{{ item.enabled | default(1) }}"
        gpgcheck: "{{ item.gpgcheck | default(0) }}"
        sslverify: true
        username: "{{ private_repository_admin_user | default(omit) }}"
        password: "{{ private_repository_admin_pass | default(omit) }}"
        state: present
        file: "nexus-{{ item.name }}"
      loop: "{{ private_repository_yum_repositories }}"
      no_log: true

    - name: Clean metadata
      become: true
      ansible.builtin.command: yum clean all
  tags: ['yum', 'repositories']

- name: APT Repository Management
  when:
    - ansible_pkg_mgr == "apt"
  block:
    - name: Backup existing sources
      become: true
      ansible.builtin.copy:
        src: "/etc/apt/sources.list.d/"
        dest: "/tmp/apt.sources.d.backup-{{ ansible_date_time.epoch }}/"
        remote_src: true
        directory_mode: true
      when: true

    - name: Remove existing configs
      become: true
      ansible.builtin.file:
        path: "{{ item }}"
        state: absent
      loop: "{{ lookup('ansible.builtin.fileglob', '/etc/apt/sources.list.d/*.list') }}"

    - name: Add repo GPG key
      become: true
      ansible.builtin.apt_key:
        url: "{{ nexus_base_url }}/repository/apt-keys/{{ apt_gpg_key }}"
        state: present
      when: apt_gpg_key is defined

    - name: Configure APT repos
      become: true
      ansible.builtin.apt_repository:
        repo: "deb [arch=amd64 signed-by=/usr/share/keyrings/{{ apt_gpg_key }}] {{ private_repository_base_url }}/repository/apt-{{ item.distribution }} {{ item.distribution }} {{ item.components | default('main') }}"
        state: present
        filename: "nexus-{{ item.name }}"
        update_cache: no
      loop: "{{ private_repository_apt_repositories }}"

    - name: Update package cache
      become: true
      ansible.builtin.apt:
        update_cache: yes
        cache_valid_time: 3600
  tags: ['apt', 'repositories']